// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/service/todo/todoservice.go

// Package mock_todo is a generated GoMock package.
package mock_todo

import (
	context "context"
	reflect "reflect"
	ent "todo-app/ent"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoReposityory is a mock of TodoReposityory interface.
type MockTodoReposityory struct {
	ctrl     *gomock.Controller
	recorder *MockTodoReposityoryMockRecorder
}

// MockTodoReposityoryMockRecorder is the mock recorder for MockTodoReposityory.
type MockTodoReposityoryMockRecorder struct {
	mock *MockTodoReposityory
}

// NewMockTodoReposityory creates a new mock instance.
func NewMockTodoReposityory(ctrl *gomock.Controller) *MockTodoReposityory {
	mock := &MockTodoReposityory{ctrl: ctrl}
	mock.recorder = &MockTodoReposityoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoReposityory) EXPECT() *MockTodoReposityoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoReposityory) Create(arg0 context.Context, arg1 int, arg2, arg3 string) (*ent.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ent.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoReposityoryMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoReposityory)(nil).Create), arg0, arg1, arg2, arg3)
}

// FindById mocks base method.
func (m *MockTodoReposityory) FindById(arg0 context.Context, arg1 int) (*ent.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*ent.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTodoReposityoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTodoReposityory)(nil).FindById), arg0, arg1)
}

// FindByUserId mocks base method.
func (m *MockTodoReposityory) FindByUserId(arg0 context.Context, arg1 int) ([]*ent.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].([]*ent.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockTodoReposityoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockTodoReposityory)(nil).FindByUserId), arg0, arg1)
}
